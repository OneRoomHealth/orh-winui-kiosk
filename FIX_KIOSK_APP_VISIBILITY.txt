===============================================================
FIX: OneRoom Health App Not Showing in Kiosk App List
===============================================================

The app is installed but not available to the kiosk user.
Here's how to fix it:

===============================================================
SOLUTION 1: Provision the App for All Users (Recommended)
===============================================================

Run this in PowerShell (Admin):

# Find the app package
$app = Get-AppxPackage | Where-Object {$_.Name -like "*OneRoomHealth*"}

# Provision it for all users (including future users like KioskUser)
Add-AppxProvisionedPackage -Online -PackagePath $app.InstallLocation\AppxManifest.xml -SkipLicense

# Verify it's provisioned
Get-AppxProvisionedPackage -Online | Where-Object {$_.DisplayName -like "*OneRoomHealth*"}


===============================================================
SOLUTION 2: Install App for the Kiosk User Specifically
===============================================================

# Switch to the KioskUser account first
# Then in PowerShell (Admin), install for that user:

$kioskUser = "KioskUser"

# Re-register the app for the kiosk user
$app = Get-AppxPackage -AllUsers | Where-Object {$_.Name -like "*OneRoomHealth*"}
Add-AppxPackage -Register "$($app.InstallLocation)\AppxManifest.xml" -DisableDevelopmentMode -User $kioskUser


===============================================================
SOLUTION 3: Use PowerShell Configuration Instead of GUI
===============================================================

Since the GUI isn't showing the app, use PowerShell to configure kiosk mode directly:

# 1. Get the AUMID
$app = Get-AppxPackage -AllUsers | Where-Object {$_.Name -like "*OneRoomHealth*"}
$aumid = $app.PackageFamilyName + "!App"
Write-Host "AUMID: $aumid"

# 2. Create kiosk config (replace PASTE_AUMID_HERE with the value from above)
$config = @"
<?xml version="1.0" encoding="utf-8" ?>
<AssignedAccessConfiguration xmlns="http://schemas.microsoft.com/AssignedAccess/2017/config">
  <Profiles>
    <Profile Id="{9A2A490F-10F6-4764-974A-43B19E722C23}">
      <AllAppsList>
        <AllowedApps>
          <App AppUserModelId="PASTE_AUMID_HERE" />
        </AllowedApps>
      </AllAppsList>
      <StartLayout><![CDATA[<LayoutModificationTemplate xmlns="http://schemas.microsoft.com/Start/2014/LayoutModification"><LayoutOptions StartTileGroupCellWidth="6" /><DefaultLayoutOverride><StartLayoutCollection><defaultlayout:StartLayout GroupCellWidth="6" xmlns:defaultlayout="http://schemas.microsoft.com/Start/2014/FullDefaultLayout" /></StartLayoutCollection></DefaultLayoutOverride></LayoutModificationTemplate>]]></StartLayout>
      <Taskbar ShowTaskbar="false"/>
    </Profile>
  </Profiles>
  <Configs>
    <Config>
      <Account>KioskUser</Account>
      <DefaultProfile Id="{9A2A490F-10F6-4764-974A-43B19E722C23}"/>
    </Config>
  </Configs>
</AssignedAccessConfiguration>
"@

# 3. Save and apply
$config | Out-File "$env:TEMP\kiosk.xml" -Encoding UTF8
Set-AssignedAccess -ConfigFile "$env:TEMP\kiosk.xml"

# 4. Verify
Get-AssignedAccess


===============================================================
COMPLETE AUTOMATED FIX SCRIPT
===============================================================

Run this entire script in PowerShell (Admin):

# OneRoom Health Kiosk - Complete Automated Setup
Write-Host "=== OneRoom Health Kiosk Setup ===" -ForegroundColor Cyan

# Step 1: Create kiosk user if doesn't exist
Write-Host "`n1. Setting up kiosk user..." -ForegroundColor Yellow
$kioskUser = "KioskUser"
$kioskPass = "KioskPass123!"

$user = Get-LocalUser -Name $kioskUser -ErrorAction SilentlyContinue
if (-not $user) {
    $Password = ConvertTo-SecureString $kioskPass -AsPlainText -Force
    New-LocalUser -Name $kioskUser -Password $Password -FullName "Kiosk User" -PasswordNeverExpires
    Add-LocalGroupMember -Group "Users" -Member $kioskUser
    Write-Host "Created user: $kioskUser" -ForegroundColor Green
} else {
    Write-Host "User already exists: $kioskUser" -ForegroundColor Green
}

# Step 2: Find and provision the app
Write-Host "`n2. Provisioning app for all users..." -ForegroundColor Yellow
$app = Get-AppxPackage -AllUsers | Where-Object {$_.Name -like "*OneRoomHealth*"} | Select-Object -First 1

if (-not $app) {
    Write-Error "OneRoom Health app not found! Install the app first."
    exit 1
}

Write-Host "Found: $($app.Name) v$($app.Version)" -ForegroundColor Green

# Register for kiosk user
try {
    Add-AppxPackage -Register "$($app.InstallLocation)\AppxManifest.xml" -DisableDevelopmentMode -ErrorAction Stop
    Write-Host "App registered for all users" -ForegroundColor Green
} catch {
    Write-Host "App already registered (this is OK)" -ForegroundColor Gray
}

# Step 3: Get AUMID and configure kiosk
Write-Host "`n3. Configuring kiosk mode..." -ForegroundColor Yellow
$aumid = $app.PackageFamilyName + "!App"
Write-Host "Using AUMID: $aumid" -ForegroundColor Cyan

$kioskConfig = @"
<?xml version="1.0" encoding="utf-8" ?>
<AssignedAccessConfiguration xmlns="http://schemas.microsoft.com/AssignedAccess/2017/config">
  <Profiles>
    <Profile Id="{9A2A490F-10F6-4764-974A-43B19E722C23}">
      <AllAppsList>
        <AllowedApps>
          <App AppUserModelId="$aumid" />
        </AllowedApps>
      </AllAppsList>
      <StartLayout><![CDATA[<LayoutModificationTemplate xmlns="http://schemas.microsoft.com/Start/2014/LayoutModification"><LayoutOptions StartTileGroupCellWidth="6" /><DefaultLayoutOverride><StartLayoutCollection><defaultlayout:StartLayout GroupCellWidth="6" xmlns:defaultlayout="http://schemas.microsoft.com/Start/2014/FullDefaultLayout" /></StartLayoutCollection></DefaultLayoutOverride></LayoutModificationTemplate>]]></StartLayout>
      <Taskbar ShowTaskbar="false"/>
    </Profile>
  </Profiles>
  <Configs>
    <Config>
      <Account>$kioskUser</Account>
      <DefaultProfile Id="{9A2A490F-10F6-4764-974A-43B19E722C23}"/>
    </Config>
  </Configs>
</AssignedAccessConfiguration>
"@

$configPath = "$env:TEMP\KioskConfig.xml"
$kioskConfig | Out-File -FilePath $configPath -Encoding UTF8

try {
    Set-AssignedAccess -ConfigFile $configPath
    Write-Host "Kiosk mode configured!" -ForegroundColor Green
} catch {
    Write-Error "Failed to set assigned access: $_"
    Write-Host "Config saved to: $configPath" -ForegroundColor Yellow
    Write-Host "You can manually apply it later with: Set-AssignedAccess -ConfigFile $configPath"
    exit 1
}

# Step 4: Enable auto-login
Write-Host "`n4. Enabling auto-login..." -ForegroundColor Yellow
Set-ItemProperty -Path "HKLM:\SOFTWARE\Microsoft\Windows NT\CurrentVersion\Winlogon" -Name "AutoAdminLogon" -Value "1"
Set-ItemProperty -Path "HKLM:\SOFTWARE\Microsoft\Windows NT\CurrentVersion\Winlogon" -Name "DefaultUserName" -Value $kioskUser
Set-ItemProperty -Path "HKLM:\SOFTWARE\Microsoft\Windows NT\CurrentVersion\Winlogon" -Name "DefaultPassword" -Value $kioskPass
Write-Host "Auto-login enabled!" -ForegroundColor Green

# Step 5: Verify configuration
Write-Host "`n5. Verifying configuration..." -ForegroundColor Yellow
$assignedAccess = Get-AssignedAccess
if ($assignedAccess) {
    Write-Host "Assigned Access is configured:" -ForegroundColor Green
    $assignedAccess
} else {
    Write-Warning "Assigned Access configuration not found!"
}

Write-Host "`n=== Setup Complete! ===" -ForegroundColor Cyan
Write-Host "`nWhat happens next:" -ForegroundColor Yellow
Write-Host "1. Sign out or restart this tablet" -ForegroundColor White
Write-Host "2. Tablet auto-logs in as: $kioskUser" -ForegroundColor White
Write-Host "3. OneRoom Health Kiosk app launches automatically" -ForegroundColor White
Write-Host "4. All gestures and shortcuts will be blocked" -ForegroundColor White
Write-Host "`nTo exit kiosk: 5 taps in upper-right corner â†’ PIN: 1234" -ForegroundColor Green
Write-Host "`nTo manage tablet later:" -ForegroundColor Gray
Write-Host "  - Sign out from kiosk (Ctrl+Alt+Del)" -ForegroundColor Gray
Write-Host "  - Log in with your admin account" -ForegroundColor Gray
Write-Host "  - Run: Clear-AssignedAccess (to disable kiosk mode)" -ForegroundColor Gray


===============================================================
TROUBLESHOOTING
===============================================================

If you still don't see the app in Settings UI:

1. Skip the Settings UI entirely - use the automated script above
2. The PowerShell method bypasses the GUI and configures directly
3. This is actually more reliable than the GUI anyway!


To verify it worked:

Get-AssignedAccess

You should see:
- User: KioskUser
- Pplr_Name: with your app's AUMID


To remove kiosk mode:

Clear-AssignedAccess


===============================================================
WHAT'S HAPPENING
===============================================================

The Windows Settings app picker only shows apps that are:
1. Installed for ALL users (not just your admin account)
2. Properly provisioned in the system

The automated script fixes this by:
1. Re-registering the app system-wide
2. Bypassing the GUI and configuring kiosk mode via XML
3. This always works, even when the GUI doesn't show the app

===============================================================

